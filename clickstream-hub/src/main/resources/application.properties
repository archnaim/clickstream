##APPLICATION ------------------------------------------------
server.context-path=/clickstream-hub
server.port=8091
spring.application.name=clickstream-hub
#logging.file=logs/clickstream.log

#KAFKA ------------------------------------------------------
kafka.application.id=clickstream-hub
acn.kafka.bootstrap.servers=localhost:9092
kafka.topic.clickstream= cs-in-raw-t
kafka.topic.faqcount = cs-faq-count-t
kafka.group.consumerClickstream = clickstream-consumer-group
kafka.group.consumerFaqCount = faqcount-consumer-group

kafka.join.window.time=100
kafka.auto_offset_reset_config = latest


##REDIS ----------------------------------------------------------------
#redis.master.name=mymaster
##redis.sentinel.host=10.54.9.10:26380,10.54.9.10:26381,10.54.9.10:26382
#redis.sentinel.host=localhost:26379
#redis.sentinel.timeout=1000
#redis.max.total=100
#redis.max.idle=100
#redis.min.idle=100
#redis.max.wait=2000
#redis.min.evict=5
#redis.evict.interval=5
#
#redis.timeout.inminute = 15

spring.redis.port=6379
#spring.redis.sentinel.master=mymaster # Name of the Redis server.
#spring.redis.sentinel.nodes=10.54.9.10:26380,10.54.9.10:26381,10.54.9.10:26382 # Comma-separated list of "host:port" pairs.
#spring.redis.jedis.pool.max-active=100 # Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
#spring.redis.jedis.pool.max-idle=100 # Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
#spring.redis.jedis.pool.max-wait=2000 # Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
#spring.redis.jedis.pool.min-idle=100 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.



##PROXY
#proxy.host = 10.54.22.53
#proxy.port = 58080
#proxy.enabled=false

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update


#DATABASE (PRIMARY)-------------------------------------------------------------------
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.maximumPoolSize = 10
spring.datasource.url = jdbc:mysql://localhost:3306/clickstream?useSSL=false&serverTimezone=UTC
spring.datasource.username = root
spring.datasource.password = root
### Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


#EUREKA
eureka.client.service-url.defaultZone=http://localhost:8762/eureka/

save.payload.db=false
save.count.db=true
scheduler.backup.toDB=0 1 1 * * ?